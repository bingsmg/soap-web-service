plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.sboss.hexing'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

configurations {
    jaxws
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
//    implementation 'org.springframework.ws:spring-ws-support:4.0.8'
    implementation 'org.glassfish.jaxb:jaxb-runtime:3.0.2'  // 添加这一行解决JAXB问题

    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    jaxws(
            'com.sun.xml.ws:jaxws-tools:3.0.0',
            'jakarta.xml.ws:jakarta.xml.ws-api:3.0.0',
            'jakarta.xml.bind:jakarta.xml.bind-api:3.0.0',
            'jakarta.activation:jakarta.activation-api:2.0.0',
            'com.sun.xml.ws:jaxws-rt:3.0.0'
    )

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

def jaxwsBaseDir = layout.buildDirectory.dir("generated/sources/jaxws")

// Define all WSDL metadata
def wsdlDefinitions = [
        creditVend: [
                wsdl   : 'http://localhost:8082/ws/creditvend.wsdl',
                package: 'com.sboss.hexing.client.creditvend'
        ],
//        reprint: [
//                wsdl   : 'http://localhost:8080/ws/reprint.wsdl',
//                package: 'com.sboss.hexing.client.reprint'
//        ]
]

// Dynamically register wsimport tasks for each WSDL
wsdlDefinitions.each { name, spec ->
    def taskName = "wsimport${name.capitalize()}"
    def relativePath = "generated/sources/jaxws/${name}"
    def outputDirProvider = layout.buildDirectory.dir(relativePath)

    tasks.register(taskName) {
        group = 'wsdl'
        description = "Generate JAX-WS sources for ${name}"

        inputs.property("wsdlUrl", spec.wsdl)
        outputs.dir(outputDirProvider)

        doLast {
            def outDir = outputDirProvider.get().asFile
            mkdir(outDir)

            ant.taskdef(
                    name: 'wsimport',
                    classname: 'com.sun.tools.ws.ant.WsImport',
                    classpath: configurations.jaxws.asPath
            )

            ant.wsimport(
                    keep: true,
                    xnocompile: true,
                    verbose: true,
                    destdir: outDir,
                    wsdl: spec.wsdl,
                    package: spec.package,
                    extension: true
            ) {
                xjcarg(value: '-XautoNameResolution')
            }
        }
    }

    // Add generated directories to source set
    sourceSets.main.java.srcDir(outputDirProvider)

    // Ensure task runs before compileJava
    tasks.named('compileJava').configure {
        dependsOn(tasks.named(taskName))
    }
}

tasks.named('test') {
    useJUnitPlatform()
}